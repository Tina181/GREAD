/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch_geometric/data/in_memory_dataset.py:300: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/root/autodl-tmp/GREAD/src/function_gread.py:37: UserWarning: nn.init.uniform is now deprecated in favor of nn.init.uniform_.
  uniform(self.b_W, a=-1, b=1)
Traceback (most recent call last):
  File "/root/autodl-tmp/GREAD/src/run_GNN_sweep.py", line 518, in <module>
    main(opt)
  File "/root/autodl-tmp/GREAD/src/run_GNN_sweep.py", line 290, in main
    loss = train(model, optimizer, data, pos_encoding)  # train
  File "/root/autodl-tmp/GREAD/src/run_GNN_sweep.py", line 71, in train
    out = model(feat, pos_encoding)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/autodl-tmp/GREAD/src/GNN.py", line 96, in forward
    z = self.forward_XN(x,pos_encoding)
  File "/root/autodl-tmp/GREAD/src/GNN.py", line 78, in forward_XN
    z = self.odeblock(x)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/autodl-tmp/GREAD/src/block_attention.py", line 60, in forward
    state_dt = integrator(
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torchdiffeq/_impl/odeint.py", line 79, in odeint
    solution = solver.integrate(t)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torchdiffeq/_impl/solvers.py", line 114, in integrate
    dy, f0 = self._step_func(self.func, t0, dt, t1, y0)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torchdiffeq/_impl/fixed_grid.py", line 10, in _step_func
    f0 = func(t0, y0, perturb=Perturb.NEXT if self.perturb else Perturb.NONE)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torchdiffeq/_impl/misc.py", line 197, in forward
    return self.base_func(t, y)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/grade/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/autodl-tmp/GREAD/src/function_gread.py", line 230, in forward
    raise Exception('Unknown reaction term.')
Exception: Unknown reaction term.
rep 0
{'use_best_params': True, 'gpu': 0, 'epoch': 200, 'patience': None, 'optimizer': 'adam', 'lr': 0.011402915506754104, 'decay': 0.008014968630105014, 'dataset': 'Cora', 'data_norm': 'gcn', 'self_loop_weight': 1, 'use_labels': False, 'label_rate': 0.5, 'planetoid_split': False, 'geom_gcn_splits': False, 'num_splits': 10, 'not_lcc': True, 'hetero_SL': False, 'hetero_undir': False, 'block': 'attention', 'function': 'gread', 'hidden_dim': 64, 'fc_out': False, 'input_dropout': 0.5043839651430236, 'dropout': 0.4145754297432822, 'batch_norm': False, 'alpha': 1.0, 'alpha_dim': 'sc', 'no_alpha_sigmoid': False, 'source_dim': 'sc', 'beta_dim': 'sc', 'use_mlp': True, 'add_source': False, 'XN_activation': False, 'm2_mlp': False, 'time': 2.01, 'augment': False, 'method': 'euler', 'step_size': 0.15000000000000002, 'max_iters': 100, 'adjoint_method': 'adaptive_heun', 'adjoint': False, 'adjoint_step_size': 1, 'tol_scale': 1.0, 'tol_scale_adjoint': 1.0, 'max_nfe': 5000, 'no_early': True, 'earlystopxT': 3, 'max_test_steps': 100, 'jacobian_norm2': None, 'total_deriv': None, 'kinetic_energy': None, 'directional_penalty': None, 'leaky_relu_slope': 0.2, 'attention_dropout': 0.0, 'heads': 1, 'attention_norm_idx': 0, 'attention_dim': 64, 'mix_features': False, 'reweight_attention': False, 'attention_type': 'scaled_dot', 'square_plus': False, 'gcn_fixed': 'False', 'gcn_enc_dec': 'False', 'gcn_non_lin': 'False', 'gcn_symm': 'False', 'gcn_bias': 'False', 'gcn_mid_dropout': 'False', 'gcn_params': None, 'gcn_params_idx': 0, 'rewiring': None, 'gdc_method': 'ppr', 'gdc_sparsification': 'topk', 'gdc_k': 64, 'gdc_threshold': 0.0001, 'gdc_avg_degree': 64, 'ppr_alpha': 0.05, 'heat_time': 3.0, 'att_samp_pct': 1, 'use_flux': False, 'exact': False, 'M_nodes': 64, 'new_edges': 'random', 'sparsify': 'S_hat', 'threshold_type': 'topk_adj', 'rw_addD': 0.02, 'rw_rmvR': 0.02, 'rewire_KNN': False, 'rewire_KNN_T': 'T0', 'rewire_KNN_epoch': 5, 'rewire_KNN_k': 64, 'rewire_KNN_sym': False, 'KNN_online': False, 'KNN_online_reps': 4, 'KNN_space': 'pos_distance', 'pos_enc_csv': False, 'beltrami': False, 'fa_layer': False, 'pos_enc_type': 'GDC', 'pos_enc_orientation': 'row', 'feat_hidden_dim': 64, 'pos_enc_hidden_dim': 32, 'edge_sampling': False, 'edge_sampling_T': 'T0', 'edge_sampling_epoch': 5, 'edge_sampling_add': 0.64, 'edge_sampling_add_type': 'importance', 'edge_sampling_rmv': 0.32, 'edge_sampling_sym': False, 'edge_sampling_online': False, 'edge_sampling_online_reps': 4, 'edge_sampling_space': 'attention', 'reaction_term': 'aggdiff-a', 'beta_diag': True, 'trusted_mask': False, 'noise': 0.0, 'noise_pos': None, 'prediffuse': False, 'x0': False, 'nox0': False, 'icxb': 1.0, 'source_scale': 1.0, 'alltime': False, 'allnumtrain': False, 'num_train_per_class': 20, 'save_result': False, 'wandb': True, 'wandb_sweep': False, 'wandb_entity': 'username', 'wandb_project': 'grade', 'wandb_run_name': None, 'run_track_reports': False, 'save_wandb_reports': False, 'device': 'cuda:0'}
GNN
m1.weight
torch.Size([64, 1433])
m1.bias
torch.Size([64])
m11.weight
torch.Size([64, 64])
m11.bias
torch.Size([64])
m12.weight
torch.Size([64, 64])
m12.bias
torch.Size([64])
m2.weight
torch.Size([7, 64])
m2.bias
torch.Size([7])
odeblock.odefunc.alpha_train
torch.Size([])
odeblock.odefunc.source_train
torch.Size([])
odeblock.odefunc.beta_train
torch.Size([])
odeblock.odefunc.alpha_sc
torch.Size([1])
odeblock.odefunc.source_sc
torch.Size([1])
odeblock.odefunc.b_W
torch.Size([64])
odeblock.reg_odefunc.odefunc.alpha_train
torch.Size([])
odeblock.reg_odefunc.odefunc.source_train
torch.Size([])
odeblock.reg_odefunc.odefunc.beta_train
torch.Size([])
odeblock.reg_odefunc.odefunc.alpha_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.source_sc
torch.Size([1])
odeblock.reg_odefunc.odefunc.b_W
torch.Size([64])
odeblock.multihead_att_layer.Q.weight
torch.Size([64, 64])
odeblock.multihead_att_layer.Q.bias
torch.Size([64])
odeblock.multihead_att_layer.V.weight
torch.Size([64, 64])
odeblock.multihead_att_layer.V.bias
torch.Size([64])
odeblock.multihead_att_layer.K.weight
torch.Size([64, 64])
odeblock.multihead_att_layer.K.bias
torch.Size([64])
odeblock.multihead_att_layer.Wout.weight
torch.Size([64, 64])
odeblock.multihead_att_layer.Wout.bias
torch.Size([64])