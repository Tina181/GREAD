import pandas as pd

# 定义数据
python

复制
# Node-classification results
results = {
    "Hom level": ["0.11", "0.21", "0.30", "0.22", "0.22", "0.23", "0.74", "0.80", "0.81"],
    "Models": [
        "PairNorm", "GraphSAGE", "GCN", "GAT", "CGNN", "GRAND", "Sheaf", "GRAFF", "GREAD",
        "Aggdiff-gat", "Aggdiff-gauss", "Aggdiff-log", "Aggdiff-sin"
    ],
    "Texas": [
        "60.27 ± 4.34", "82.43 ± 6.14", "60.54 ± 5.30", "52.16 ± 6.63", "71.35 ± 4.76",
        "75.68 ± 7.25", "85.40 ± 6.07", "84.59 ± 4.53", "91.89 ± 4.686", "91.89 ± 4.686",
        "83.78 ± 4.292", "75.97 ± 12.3", "78.38 ± 7.632"
    ],
    "Wisconsin": [
        "48.43 ± 5.56", "81.18 ± 5.56", "51.76 ± 3.76", "49.41 ± 4.76", "74.91 ± 3.64",
        "79.41 ± 4.74", "89.41 ± 4.74", "85.68 ± 4.49", "86.27 ± 8.292", "86.27 ± 8.398",
        "86.27 ± 4.426", "90.2 ± 4.429"
    ],
    "Cornell": [
        "58.92 ± 3.15", "75.95 ± 5.01", "61.76 ± 3.76", "61.89 ± 5.06", "84.86 ± 4.71",
        "84.86 ± 4.71", "37.81 ± 1.15", "71.08 ± 3.64", "86.49 ± 7.16", "86.49 ± 1.735",
        "38.88 ± 3.069", "39.14 ± 4.092", "86.49 ± 5.199"
    ],
    "Film": [
        "27.40 ± 1.24", "34.23 ± 0.99", "60.54 ± 5.30", "61.61 ± 0.74", "64.22 ± 2.76",
        "54.76 ± 2.71", "37.81 ± 1.15", "57.60 ± 1.14", "38.95 ± 2.872", "50.62 ± 2.31",
        "61.86 ± 6.947", "45.63 ± 6.62", "39.47 ± 3.433"
    ],
    "Squirrel": [
        "50.44 ± 2.64", "58.73 ± 1.68", "64.82 ± 2.66", "60.26 ± 3.84", "46.89 ± 2.67",
        "71.93 ± 3.684", "68.75 ± 2.71", "69.03 ± 3.224", "71.93 ± 3.684", "69.96 ± 3.771",
        "71.49 ± 6.227", "50.43 ± 2.728"
    ],
    "Chameleon": [
        "62.74 ± 2.83", "58.73 ± 1.68", "64.82 ± 2.66", "60.26 ± 3.84", "46.89 ± 2.67",
        "67.11 ± 2.51", "61.75 ± 1.42", "58.62 ± 1.08", "70.00 ± 1.70", "71.93 ± 3.684",
        "78.06 ± 2.577", "69.52 ± 5.267"
    ],
    "Citeseer": [
        "73.59 ± 1.47", "76.04 ± 1.30", "88.45 ± 0.50", "88.42 ± 0.67", "76.95 ± 1.23",
        "76.66 ± 1.57", "69.17 ± 1.45", "90.01 ± 0.42", "90.62 ± 0.827", "90.62 ± 0.827",
        "91.00 ± 0.824", "69.03 ± 3.224"
    ],
    "Pubmed": [
        "87.53 ± 0.44", "88.90 ± 1.30", "86.33 ± 1.05", "87.30 ± 1.10", "86.93 ± 1.03",
        "87.49 ± 1.14", "76.90 ± 2.11", "90.24 ± 0.683", "90.62 ± 0.827", "90.62 ± 0.827",
        "91.00 ± 0.824", "90.24 ± 0.6833"
    ],
    "Cora": [
        "85.79 ± 1.01", "86.90 ± 1.14", "86.33 ± 1.08", "86.93 ± 1.03", "86.93 ± 1.03",
        "87.36 ± 1.09", "76.90 ± 2.11", "89.34 ± 0.827", "87.73 ± 3.404", "87.73 ± 3.404",
        "87.93 ± 1.051", "87.53 ± 0.7237"
    ]
}

# 将数据转换为 DataFrame
df = pd.DataFrame(data)
# 查看行数和列数
rows, columns = df.shape

# 对每个数据集进行排序并标记排名
def rank_results(df):
    ranked_df = df.copy()
    for column in df.columns[1:]:  # 跳过 'Hom level' 列
        # 提取均值并进行排序
        ranked_df[column] = ranked_df[column].apply(lambda x: float(x.split(' ± ')[0]))
        ranked_df[column + ' Rank'] = ranked_df[column].rank(ascending=False, method='min')
    return ranked_df

ranked_df = rank_results(df)

# 输出带有排名的 DataFrame
print(ranked_df.iloc[:,[0]+ list(range(columns, ranked_df.shape[1] - 1))])